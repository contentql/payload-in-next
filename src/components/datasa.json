Forgot Password {
  req: {
    context: {},
    payloadAPI: 'local',
    payload: BasePayload {
      Mutation: [Object],
      Query: [Object],
      authenticate: [Function: authenticate],
      collections: [Object],
      config: [Object],
      create: [AsyncFunction: create],
      db: [Object],
      decrypt: [Function: decrypt],
      email: [Promise],
      emailOptions: [Object],
      encrypt: [Function: encrypt],
      errorHandler: [AsyncFunction (anonymous)],
      express: [Function],
      extensions: undefined,
      find: [AsyncFunction: find],
      findByID: [AsyncFunction: findByID],
      findGlobal: [AsyncFunction: findGlobal],
      findGlobalVersionByID: [AsyncFunction: findGlobalVersionByID],
      findGlobalVersions: [AsyncFunction: findGlobalVersions],
      findVersionByID: [AsyncFunction: findVersionByID],
      findVersions: [AsyncFunction: findVersions],
      forgotPassword: [AsyncFunction: forgotPassword],
      getAPIURL: [Function: getAPIURL],
      getAdminURL: [Function: getAdminURL],
      globals: [Object],
      local: false,
      logger: [EventEmitter],
      login: [AsyncFunction: login],
      resetPassword: [AsyncFunction: resetPassword],
      restoreGlobalVersion: [AsyncFunction: restoreGlobalVersion],
      restoreVersion: [AsyncFunction: restoreVersion],
      router: [Function],
      schema: [GraphQLSchema],
      secret: 'd4576daeca00d0ab1d370378a313932a',
      sendEmail: [Function: bound sendEmail] AsyncFunction,
      types: [Object],
      unlock: [AsyncFunction: unlock],
      updateGlobal: [AsyncFunction: updateGlobal],
      validationRules: [Function (anonymous)],
      verifyEmail: [AsyncFunction: verifyEmail],
      versions: {}
    },
    i18n: bound I18n {
      observers: {},
      options: [Object],
      services: [Object],
      logger: [Logger],
      modules: [Object],
      constructor: [Function: bound I18n],
      init: [Function: bound init],
      loadResources: [Function: bound loadResources],
      reloadResources: [Function: bound reloadResources],
      use: [Function: bound use],
      setResolvedLanguage: [Function: bound setResolvedLanguage],
      changeLanguage: [Function: bound changeLanguage],
      getFixedT: [Function: bound getFixedT],
      t: [Function: bound t],
      exists: [Function: bound exists],
      setDefaultNamespace: [Function: bound setDefaultNamespace],
      hasLoadedNamespace: [Function: bound hasLoadedNamespace],
      loadNamespaces: [Function: bound loadNamespaces],
      loadLanguages: [Function: bound loadLanguages],
      dir: [Function: bound dir],
      cloneInstance: [Function: bound cloneInstance],
      toJSON: [Function: bound toJSON],
      createInstance: [Function (anonymous)],
      store: [ResourceStore],
      translator: [Translator],
      format: [Function: bound format],
      getResource: [Function (anonymous)],
      hasResourceBundle: [Function (anonymous)],
      getResourceBundle: [Function (anonymous)],
      getDataByLanguage: [Function (anonymous)],
      addResource: [Function (anonymous)],
      addResources: [Function (anonymous)],
      addResourceBundle: [Function (anonymous)],
      removeResourceBundle: [Function (anonymous)],
      isLanguageChangingTo: undefined,
      language: 'en',
      languages: [Array],
      resolvedLanguage: 'en',
      isInitialized: true
    },
    t: [Function: bound t],
    user: null,
    collection: { config: [Object], graphQL: [Object] },
    payloadDataLoader: DataLoader {
      _batchLoadFn: [AsyncFunction (anonymous)],
      _maxBatchSize: Infinity,
      _batchScheduleFn: [Function (anonymous)],
      _cacheKeyFn: [Function (anonymous)],
      _cacheMap: Map(0) {},
      _batch: null,
      name: null
    }
  },
  token: '35d385f90fb8ca05956e2ee22bf9310939108ea3',
  user: {
    id: '65d883976602104e98614a4a',
    roles: [ 'user' ],
    email: 'jagadeeshmaripi2001@gmail.com',
    _verified: true,
    createdAt: '2024-02-23T11:37:59.331Z',
    updatedAt: '2024-02-25T09:54:08.134Z',
    loginAttempts: 0
  }
}
 ○ Compiling /reset-password ...
 ✓ Compiled /reset-password in 2.4s (766 modules)
webpack building...
webpack built 7e57123892ec6106a9b5 in 5170ms
webpack compiled successfully
webpack building...
webpack built 7e57123892ec6106a9b5 in 308ms
webpack compiled successfully
Forgot Password {
  req: {
    context: {},
    payloadAPI: 'local',
    payload: BasePayload {
      Mutation: [Object],
      Query: [Object],
      authenticate: [Function: authenticate],
      collections: [Object],
      config: [Object],
      create: [AsyncFunction: create],
      db: [Object],
      decrypt: [Function: decrypt],
      email: [Promise],
      emailOptions: [Object],
      encrypt: [Function: encrypt],
      errorHandler: [AsyncFunction (anonymous)],
      express: [Function],
      extensions: undefined,
      find: [AsyncFunction: find],
      findByID: [AsyncFunction: findByID],
      findGlobal: [AsyncFunction: findGlobal],
      findGlobalVersionByID: [AsyncFunction: findGlobalVersionByID],
      findGlobalVersions: [AsyncFunction: findGlobalVersions],
      findVersionByID: [AsyncFunction: findVersionByID],
      findVersions: [AsyncFunction: findVersions],
      forgotPassword: [AsyncFunction: forgotPassword],
      getAPIURL: [Function: getAPIURL],
      getAdminURL: [Function: getAdminURL],
      globals: [Object],
      local: false,
      logger: [EventEmitter],
      login: [AsyncFunction: login],
      resetPassword: [AsyncFunction: resetPassword],
      restoreGlobalVersion: [AsyncFunction: restoreGlobalVersion],
      restoreVersion: [AsyncFunction: restoreVersion],
      router: [Function],
      schema: [GraphQLSchema],
      secret: 'd4576daeca00d0ab1d370378a313932a',
      sendEmail: [Function: bound sendEmail] AsyncFunction,
      types: [Object],
      unlock: [AsyncFunction: unlock],
      updateGlobal: [AsyncFunction: updateGlobal],
      validationRules: [Function (anonymous)],
      verifyEmail: [AsyncFunction: verifyEmail],
      versions: {}
    },
    i18n: bound I18n {
      observers: {},
      options: [Object],
      services: [Object],
      logger: [Logger],
      modules: [Object],
      constructor: [Function: bound I18n],
      init: [Function: bound init],
      loadResources: [Function: bound loadResources],
      reloadResources: [Function: bound reloadResources],
      use: [Function: bound use],
      setResolvedLanguage: [Function: bound setResolvedLanguage],
      changeLanguage: [Function: bound changeLanguage],
      getFixedT: [Function: bound getFixedT],
      t: [Function: bound t],
      exists: [Function: bound exists],
      setDefaultNamespace: [Function: bound setDefaultNamespace],
      hasLoadedNamespace: [Function: bound hasLoadedNamespace],
      loadNamespaces: [Function: bound loadNamespaces],
      loadLanguages: [Function: bound loadLanguages],
      dir: [Function: bound dir],
      cloneInstance: [Function: bound cloneInstance],
      toJSON: [Function: bound toJSON],
      createInstance: [Function (anonymous)],
      store: [ResourceStore],
      translator: [Translator],
      format: [Function: bound format],
      getResource: [Function (anonymous)],
      hasResourceBundle: [Function (anonymous)],
      getResourceBundle: [Function (anonymous)],
      getDataByLanguage: [Function (anonymous)],
      addResource: [Function (anonymous)],
      addResources: [Function (anonymous)],
      addResourceBundle: [Function (anonymous)],
      removeResourceBundle: [Function (anonymous)],
      isLanguageChangingTo: undefined,
      language: 'en',
      languages: [Array],
      resolvedLanguage: 'en',
      isInitialized: true
    },
    t: [Function: bound t],
    user: null,
    collection: { config: [Object], graphQL: [Object] },
    payloadDataLoader: DataLoader {
      _batchLoadFn: [AsyncFunction (anonymous)],
      _maxBatchSize: Infinity,
      _batchScheduleFn: [Function (anonymous)],
      _cacheKeyFn: [Function (anonymous)],
      _cacheMap: Map(0) {},
      _batch: null,
      name: null
    }
  },
  token: '2e5d647cf94854ab23ec7b4faace2927fd7d2e87',
  user: {
    id: '65d883976602104e98614a4a',
    roles: [ 'user' ],
    email: 'jagadeeshmaripi2001@gmail.com',
    _verified: true,
    createdAt: '2024-02-23T11:37:59.331Z',
    updatedAt: '2024-02-25T09:57:26.071Z',
    loginAttempts: 0
  }
}

